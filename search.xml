<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo+GitHub Pages搭建个人博客（三）</title>
    <url>/posts/fab9b61b.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>这一节是一些和文章有关的东西。</p>
<a id="more"></a>

<p>现在我们试着写一篇文章。</p>
<p>Git Bash，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new post <span class="string">&quot;test&quot;</span></span><br></pre></td></tr></table></figure>

<p>此时会在source\_posts文件夹下生成名为”test.md”的文件。用Typora打开这个文件，就可以开始写文章了。</p>
<p>你会发现这个文件的开头有这样一段：</p>
<p><img src="https://imagebed-1304314898.cos.ap-nanjing.myqcloud.com/Hexo-GitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89/1.jpg" alt="1"></p>
<p>这个东西叫做Front-matter。如果你想添加标签和分类，像图上这样写就好；如果你希望不开启页面的评论，就在下面再加一行：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>写文章用的是Markdown语言，教程点这里：<a href="https://www.runoob.com/markdown/md-tutorial.html">Markdown 教程</a></p>
<p>建议先完整把这个教程看一遍，看懂之后收藏，以后遇到不会的时候再打开查。</p>
<p>为了避免在首页显示全文，可以看<a href="http://theme-next.iissnan.com/faqs.html#read-more">这里</a>来设置“阅读全文”。</p>
<p>文章写好之后，Git Bash分别输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>在本地预览效果。</p>
<h1 id="生成永久唯一文章链接"><a href="#生成永久唯一文章链接" class="headerlink" title="生成永久唯一文章链接"></a>生成永久唯一文章链接</h1><p>你会发现，文章链接是按照年、月、日、标题来生成的。如果你的文章标题中有中文，那么文章链接就会出现中文。中文链接有几个不好的地方：</p>
<ul>
<li>如果你在之后修改了文章标题，那么原链接将不能访问；</li>
<li>复制之后的链接是一长串，不够简洁；</li>
<li>中文不利于搜索引擎收录。</li>
</ul>
<p>这里介绍一个插件，可以为每一篇文章生成永久链接（像我这样）,即使以后修改了文章标题，这个链接也不会改变。</p>
<p>这个插件叫做hexo-abbrlink，在<a href="https://github.com/Rozbo/hexo-abbrlink">这里</a>下载安装。</p>
<p>安装完成后，打开站点配置文件，将原有设置改为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink.html</span>  <span class="comment"># 此处可以自己设置，也可以直接使用 :/abbrlink</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">    <span class="attr">alg:</span> <span class="string">crc32</span>   <span class="comment">#算法： crc16(default) and crc32</span></span><br><span class="line">    <span class="attr">rep:</span> <span class="string">hex</span>     <span class="comment">#进制： dec(default) and hex</span></span><br></pre></td></tr></table></figure>

<p>这样一来，在hexo g生成完成后，你会发现每篇文章的Front-matter内都会多出一个abbrlink字段，存放插件生成的文章ID。访问文章时，也是通过文章ID来访问，使得生成的文章链接简洁不少。</p>
<h1 id="比较好用的图床"><a href="#比较好用的图床" class="headerlink" title="比较好用的图床"></a>比较好用的图床</h1><p>写文章难免需要插入图片，如果你选择插入本地图片，会发现图片无法在部署之后的网页显示。</p>
<p>可能你会想到用GitHub做图床，把图片上传到GitHub。这样做最大的问题是，GitHub把图片保存在<a href="raw.githubusercontent.com">raw.githubusercontent.com</a>，而这个网站，在国内是访问不了的。当然，你可以通过配置hosts文件的方法让你能访问到图片，但是你的访客，99%都不会这样做，图片对他们来说依然无法显示。因此，我们需要一个第三方图床，解决图片的问题。</p>
<p>目前我发现比较好用的图床有<a href="https://sm.ms/">SM.MS</a>，限制一个文件5MB，一次上传10个文件。</p>
<p>如果想体验更好一点，上传更方便一点，可以考虑收费的阿里云和腾讯云，费用也不贵，毕竟你一个月就那么点访问量。</p>
]]></content>
      <categories>
        <category>个人博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+GitHub Pages搭建个人博客（二）</title>
    <url>/posts/b7a71549.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在上一篇文章里，我们搭建了一个基本的博客框架。这个框架能不能用呢？肯定是能的，但是恐怕没几个人会觉得好用。从现在开始，我们将对这个框架进行填充，让它满足我们的各种需求。</p>
<a id="more"></a>

<h1 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h1><p>如果你觉得官方主题不好看，你可以在<a href="https://hexo.io/themes/">Themes | Hexo</a>寻找你喜欢的主题。或者，在GitHub上搜索“hexo”，也可以找到不少主题。下图展示了GitHub上搜索“hexo”看到的结果：</p>
<p><img src="https://imagebed-1304314898.cos.ap-nanjing.myqcloud.com/Hexo-GitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/1.jpg" alt="1"></p>
<p>结果是按star数从高到低排列的。star数反映项目的受欢迎程度，在GitHub上，如果你喜欢某个项目，可以点亮star，表达对这个项目的支持。可以看到，最受欢迎的主题是NexT，其次是yilia。在我看来，博客的重点在于内容，所以一个好的主题，一定要能让人更好地把注意力集中在内容上，而不是喧宾夺主。这两个主题都能很好满足这一点。点击进入对应的仓库，可以查看各个主题的说明。</p>
<p>我选择了NexT这个主题，所以之后的内容都会围绕这个主题来展开。其它主题的配置方式大同小异。</p>
<p>在博客文件夹Git Bash，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-theme-next</span><br></pre></td></tr></table></figure>

<p>安装主题。</p>
<p>再打开博客文件夹下的站点配置文件_config.yml，设置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>

<p>就完成了主题的更换。</p>
<p>在Git Bash输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>看看效果吧~</p>
<h1 id="NexT官方文档"><a href="#NexT官方文档" class="headerlink" title="NexT官方文档"></a>NexT官方文档</h1><p>这是NexT的官方文档：<a href="http://theme-next.iissnan.com/">NexT 使用文档</a></p>
<p>跟着这个文档，你可以设置主题样式、菜单内容、侧栏、头像、签名等，并引入搜索、统计、评论、RSS等常用功能。</p>
<p>建议养成遇到问题优先查看官方文档的习惯，因为作者一定最了解自己做的东西，官方文档是最权威的。</p>
<p>官方文档已经对主题如何配置做了十分详细的介绍，下面仅对官方文档做一点点补充说明。</p>
<h1 id="配置站点图标"><a href="#配置站点图标" class="headerlink" title="配置站点图标"></a>配置站点图标</h1><p>首先，你需要准备一张16x16和一张32x32的图片。</p>
<p>这个工具可以把图片裁剪成需要的大小：<a href="https://tool.lu/favicon/">favicon制作 - 在线工具</a></p>
<p>其次，你需要把这两张图片放入themes\next\source\images文件夹下。</p>
<p>最后，你需要更改主题配置文件（即themes\next文件夹下的_config.yml文件，下同）的这个地方：</p>
<p><img src="https://imagebed-1304314898.cos.ap-nanjing.myqcloud.com/Hexo-GitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/8.jpg" alt="8"></p>
<h1 id="valine"><a href="#valine" class="headerlink" title="valine"></a>valine</h1><p>官方文档没有提到valine这个评论系统，但NexT主题本身是支持valine的。</p>
<p>valine的官方文档在这里：<a href="https://valine.js.org/">介绍 | valine 一款快速、简洁且高效的无后端评论系统。</a></p>
<p>valine并非没有后端，而是使用了国内后端云服务提供商LeanCloud提供的存储服务。</p>
<p>下面详细说明valine评论功能的添加和设置。</p>
<h2 id="配置LeanCloud"><a href="#配置LeanCloud" class="headerlink" title="配置LeanCloud"></a>配置LeanCloud</h2><p>在<a href="https://www.leancloud.cn/">LeanCloud</a>注册，注册后进入控制台，点击“创建应用”。名称随便起，计价方案选择“开发版”，点击“创建”。</p>
<p><img src="https://imagebed-1304314898.cos.ap-nanjing.myqcloud.com/Hexo-GitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/2.jpg" alt="2"></p>
<p>进入刚刚创建好的应用，点击“存储”→“创建Class”，分别创建名为Comment和Counter的Class。</p>
<p>再点击“设置”。先进入“安全中心”，在“Web安全域名”中填入你的网站的访问地址。</p>
<p>再进入“应用Keys”，可以看到AppID和AppKey。</p>
<h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h2><p>然后，打开位于themes/next目录下的主题配置文件_config.yml，在这里填入AppID和AppKey：</p>
<p><img src="https://imagebed-1304314898.cos.ap-nanjing.myqcloud.com/Hexo-GitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/3.jpg" alt="3"></p>
<p>这里的“visitor”设置决定是否开启文章访问量统计功能。这里需要注意，它和leancloud_visitors是冲突的，如果需要使用valine的同时开启访问量统计功能，请在这里将visitor置为true，并将leancloud_visitors中的enable置为false。</p>
<h1 id="设置背景动画"><a href="#设置背景动画" class="headerlink" title="设置背景动画"></a>设置背景动画</h1><p>NexT主题配置文件中的两种动画效果在配置前需要先安装，安装地址在配置文件中，按照说明安装即可。<img src="https://imagebed-1304314898.cos.ap-nanjing.myqcloud.com/Hexo-GitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/4.jpg" alt="4"></p>
<h1 id="设置加载时的动画效果"><a href="#设置加载时的动画效果" class="headerlink" title="设置加载时的动画效果"></a>设置加载时的动画效果</h1><p>在主题配置文件的这里进行设置，同样需要先安装dependency。</p>
<p><img src="https://imagebed-1304314898.cos.ap-nanjing.myqcloud.com/Hexo-GitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/5.jpg" alt="5"></p>
<h1 id="显示阅读进度条"><a href="#显示阅读进度条" class="headerlink" title="显示阅读进度条"></a>显示阅读进度条</h1><p>在主题配置文件的这里进行设置。</p>
<p><img src="https://imagebed-1304314898.cos.ap-nanjing.myqcloud.com/Hexo-GitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/6.jpg" alt="6"></p>
<p>将enable置为true，即可在页面最上端看到一个随阅读进度变化的横条。position设置横条位置（top：顶部，bottom：底部），color设置横条颜色，height设置横条宽度。</p>
<h1 id="显示复制代码按钮"><a href="#显示复制代码按钮" class="headerlink" title="显示复制代码按钮"></a>显示复制代码按钮</h1><p>在主题配置文件的这里进行设置。</p>
<p><img src="https://imagebed-1304314898.cos.ap-nanjing.myqcloud.com/Hexo-GitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/7.jpg" alt="7"></p>
<p>将enable置为true，可以看到代码右侧出现了复制按钮。</p>
<h1 id="更改页面底部年份和版权信息之间的图标"><a href="#更改页面底部年份和版权信息之间的图标" class="headerlink" title="更改页面底部年份和版权信息之间的图标"></a>更改页面底部年份和版权信息之间的图标</h1><p>在主题配置文件的这里进行设置。</p>
<p><img src="https://imagebed-1304314898.cos.ap-nanjing.myqcloud.com/Hexo-GitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/9.jpg" alt="9"></p>
<p>图标必须使用Font Awesome图标库内的图标，图标列表：<a href="https://fa5.dashgame.com/#/%E5%9B%BE%E6%A0%87">Font Awesome</a></p>
<p>格式参考<a href="https://fa5.dashgame.com/#/%E6%96%87%E6%A1%A3/%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95">Font Awesome文档</a>中的“基本用法”。</p>
<p>如果将animated设置为true，图标会动起来，就像你现在在底部看到的这样。</p>
<h1 id="文章结尾显示“欢迎关注我的其它发布渠道”"><a href="#文章结尾显示“欢迎关注我的其它发布渠道”" class="headerlink" title="文章结尾显示“欢迎关注我的其它发布渠道”"></a>文章结尾显示“欢迎关注我的其它发布渠道”</h1><p>在主题配置文件的这里设置。</p>
<p><img src="https://imagebed-1304314898.cos.ap-nanjing.myqcloud.com/Hexo-GitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202020-11-25%20112308.jpg" alt="10"></p>
<h1 id="显示全文字数和阅读时长"><a href="#显示全文字数和阅读时长" class="headerlink" title="显示全文字数和阅读时长"></a>显示全文字数和阅读时长</h1><p>在<a href="https://github.com/theme-next/hexo-symbols-count-time">theme-next/hexo-symbols-count-time: Symbols count and time to read of articles for Hexo. </a>安装symbols count time。</p>
<p>在站点配置文件中增加：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-symbols-count-time</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">    <span class="attr">symbols:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">time:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">total_symbols:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">total_time:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>在主题配置文件中搜索symbols_count_time，并设置为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">suffix:</span> <span class="string">mins.</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>个人博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+GitHub Pages搭建个人博客（一）</title>
    <url>/posts/9e423b68.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>在这个页面的底端有这样一句话：</p>
<p>“由 <a href="https://hexo.io/">Hexo</a> &amp; <a href="https://pisces.theme-next.org/">NexT.Pisces</a> 强力驱动”</p>
<p>相信已经有人搜索过这里出现的“Hexo”和“NexT.Pisces”。你可能会找到这样的教程：</p>
<p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">hexo史上最全搭建教程</a></p>
<p>还有Hexo的官方文档：</p>
<p><a href="https://hexo.io/zh-cn/docs/">文档 | Hexo</a></p>
<p>这些都很有用，但都有着各自的局限性。有的内容已经过时，还有的地方没有讲全面，需要结合其他内容一起看。下面我会结合我踩过的坑，对这个博客的搭建过程做一个全面的梳理。不需要专业基础，只要你会上网，会安装软件，就可以看懂这个教程。如果你也想搭建个人博客，并且觉得这个博客建得还算可以，就跟着一起做一遍；如果你觉得这个博客呈现的效果和你的期望还有差距，也可以先看一遍这里的步骤，再在现存基础上尝试实现你心目中理想的效果。</p>
<p>这一节我们用大约半个小时的时间，建立一个可以被他人访问到的博客框架。</p>
<a id="more"></a>

<h1 id="安装所有需要用到的东西"><a href="#安装所有需要用到的东西" class="headerlink" title="安装所有需要用到的东西"></a>安装所有需要用到的东西</h1><p>先不用管它们都做什么用，以后会知道的。</p>
<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>在官网<a href="https://nodejs.org/zh-cn/">Node.js</a>上下载，一路Next即可。</p>
<p>安装完成后，按Win+R→输入cmd打开命令提示符，输入</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">node</span> <span class="title">-v</span></span><br></pre></td></tr></table></figure>

<p>和</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> -v</span><br></pre></td></tr></table></figure>

<p>如果出现版本号，就说明Node.js安装成功。</p>
<h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>同样，在官网<a href="https://git-scm.com/">Git</a>上下载，一路Next即可。</p>
<p>安装完成后，打开命令提示符，输入</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">git <span class="comment">--version</span></span><br></pre></td></tr></table></figure>

<p>如果出现版本号，就说明Git安装成功。</p>
<p>安装完成后，鼠标右键菜单会多出两个选项：“Git GUI Here”和“Git Bash Here”，如下图所示：</p>
<p><img src="https://imagebed-1304314898.cos.ap-nanjing.myqcloud.com/hexo-github-pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/3.jpg" alt="3"></p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>在你打算放置本地博客文件的地方新建一个文件夹，比如说我把博客文件放在C:\Blog\hexo文件夹下。</p>
<p>然后在你刚才建的文件夹目录下点击鼠标右键，选择Git Bash Here，在跳出的控制台窗口中输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<p>安装Hexo。</p>
<p>安装完成后，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>

<p>如果出现版本号信息，说明安装成功。</p>
<h2 id="安装Visual-Studio-Code"><a href="#安装Visual-Studio-Code" class="headerlink" title="安装Visual Studio Code"></a>安装Visual Studio Code</h2><p>在<a href="https://code.visualstudio.com/">Visual Studio Code</a>下载并安装。一路Next。</p>
<h2 id="安装Typora"><a href="#安装Typora" class="headerlink" title="安装Typora"></a>安装Typora</h2><p>在<a href="https://typora.io/">Typora</a>下载并安装。Next。</p>
<h1 id="配置GitHub"><a href="#配置GitHub" class="headerlink" title="配置GitHub"></a>配置GitHub</h1><p>对，就是那个<del>全球最大的同性交友网站</del>很geek的GitHub。</p>
<h2 id="注册GitHub账号"><a href="#注册GitHub账号" class="headerlink" title="注册GitHub账号"></a>注册GitHub账号</h2><p>浏览器打开<a href="https://github.com/">GitHub</a>，在下图所示的地方注册：</p>
<p><img src="https://imagebed-1304314898.cos.ap-nanjing.myqcloud.com/hexo-github-pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/1.jpg" alt="1"></p>
<p>用户名一定要好好起，因为如果你不打算买域名，那username.github.io就是你的博客访问地址了。</p>
<h2 id="建立仓库"><a href="#建立仓库" class="headerlink" title="建立仓库"></a>建立仓库</h2><p>注册完成后，点击下图所示的位置：</p>
<p><img src="https://imagebed-1304314898.cos.ap-nanjing.myqcloud.com/hexo-github-pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/2.jpg" alt="2"></p>
<p>会跳转到这个页面：</p>
<p><img src="https://imagebed-1304314898.cos.ap-nanjing.myqcloud.com/hexo-github-pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/4.jpg" alt="4"></p>
<p>这里需要注意，“Repository name”必须是“username.github.io”（username为你的用户名），其余默认即可。</p>
<p>填写完成后，点击“Create repository”，建立仓库。</p>
<h1 id="构建网站"><a href="#构建网站" class="headerlink" title="构建网站"></a>构建网站</h1><p>在博客文件夹下Git Bash，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p>你可以看到文件夹下多了一堆文件，这些文件构成了一个个人博客网站最基本的框架。</p>
<p>再输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p>这个指令用于生成静态文件，你会看到当前文件夹下多了一个名为public的文件夹。</p>
<p>输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s  --debug</span><br></pre></td></tr></table></figure>

<p>这个指令启动本地服务器，让你可以在本地看到网站效果，同时在控制台窗口中显示网站加载过程。</p>
<blockquote>
<p>Warning若不影响运行，可以忽略。</p>
</blockquote>
<p>打开浏览器，输入<a href="http://localhost:4000/">http://localhost:4000/</a>，如果一切顺利，你会看到这样的网页：</p>
<p><img src="https://imagebed-1304314898.cos.ap-nanjing.myqcloud.com/hexo-github-pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/5.jpg" alt="5"></p>
<p>如果你看到的和预期不一致，请尝试根据控制台信息寻找原因，并检验每一步操作有无错误。</p>
<p>按Ctrl+C关闭本地服务器。</p>
<p>如果在本地服务器启动期间网站内容发生改变，直接刷新即可看到效果，不需要重启服务器。</p>
<h1 id="让网站被别人访问到"><a href="#让网站被别人访问到" class="headerlink" title="让网站被别人访问到"></a>让网站被别人访问到</h1><p>刚才的网页只有我们自己能看见，那么怎么让别人也能访问到这个网页呢？这里我们借助GitHub Pages，将网站内容托管在GitHub。选择GitHub有以下几个原因：</p>
<ol>
<li>免费；</li>
<li>支持自定义域名；</li>
<li>GitHub背靠微软这棵大树，这意味着它足够稳定，不会时不时崩溃/不声不响永久瘫痪；</li>
<li>GitHub本身是一个能打开眼界的网站。社区氛围好，关于Hexo的工具也多。</li>
</ol>
<h2 id="生成SSH"><a href="#生成SSH" class="headerlink" title="生成SSH"></a>生成SSH</h2><p>首先，我们希望Git能够使用我们的GitHub账号自动远程登录，不需要每次都手动输入用户名和密码。</p>
<p>在博客文件所在文件夹右键打开Git Bash（如无特殊说明，后文中的Git Bash均为在博客文件所在文件夹Git Bash），输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;username&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;useremail&quot;</span></span><br></pre></td></tr></table></figure>

<p>这里的user.name和user.email分别对应你在注册GitHub时填入的用户名和邮箱，请自行修改。</p>
<p>可以输入以下命令，检查你输入的用户名和邮箱是否正确</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure>

<p>然后输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;useremail&quot;</span></span><br></pre></td></tr></table></figure>

<p>这个指令生成密钥SSH key。遇到提示输入信息时直接回车即可。</p>
<p>指令执行结束后，会在当前用户目录下生成.ssh文件夹，其中包含私钥文件id_rsa和公钥文件id_rsa.pub。我们需要将公钥放在GitHub上，当需要连接GitHub自己的账户时，它就会根据公钥匹配你的私钥，只有公钥与私钥互相匹配，才能顺利将文件上传GitHub。</p>
<p>再输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-agent -s</span><br></pre></td></tr></table></figure>

<p>继续输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>

<p>这两个指令解释起来有点复杂，反正输就完事了。</p>
<h2 id="将SSH添加到GitHub"><a href="#将SSH添加到GitHub" class="headerlink" title="将SSH添加到GitHub"></a>将SSH添加到GitHub</h2><p>输入以下指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>这条指令复制SSH key到剪贴板。</p>
<p>打开GitHub，点击这里：</p>
<p><img src="https://imagebed-1304314898.cos.ap-nanjing.myqcloud.com/hexo-github-pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/6.jpg" alt="6"></p>
<p>再点击左侧侧边栏的“SSH and GPG keys”，点击右上角的“New SSH key”添加公钥：</p>
<p><img src="https://imagebed-1304314898.cos.ap-nanjing.myqcloud.com/hexo-github-pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/7.jpg" alt="7"></p>
<p>完成后点击“Add SSH key”，即可完成SSH key的添加。</p>
<p>在Git Bash中输入以下命令，检验SSH是否配置成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>出现提示输入“yes”即可。如果出现以下信息，说明配置成功</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">Hi username!You<span class="symbol">&#x27;ve</span> successfully authenticated,but GitHub does <span class="keyword">not</span> provide shell <span class="keyword">access</span>.</span><br></pre></td></tr></table></figure>

<h2 id="部署到GitHub仓库"><a href="#部署到GitHub仓库" class="headerlink" title="部署到GitHub仓库"></a>部署到GitHub仓库</h2><p>打开GitHub，点击这里：</p>
<p><img src="https://imagebed-1304314898.cos.ap-nanjing.myqcloud.com/hexo-github-pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/8.jpg" alt="8"></p>
<p>再点击你刚才建好的仓库，点击这里复制链接：</p>
<p><img src="https://imagebed-1304314898.cos.ap-nanjing.myqcloud.com/hexo-github-pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/9.jpg" alt="9"></p>
<p>用Visual Studio Code打开博客文件夹下的config.yml<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="站点配置文件">[1]</span></a></sup>，修改最后一行的配置为</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repository</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:username/username.github.io.git</span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure>

<p>其中的“repository”后粘贴你刚才复制的链接。</p>
<p>需要注意，yml的语法非常严格，请务必确保标点符号正确，不多出/遗漏空格。</p>
<p>然后在Git Bash中输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>这个指令安装deploy-git，有它才能进行部署操作。</p>
<p>然后让我们Git Bash，来一套下面的Hexo三连：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>其中hexo clean用于清除之前生成的东西（就是那个public文件夹）；hexo g（或者hexo generate）用于生成静态文件；hexo d（或者hexo deploy）用于将生成的静态文件部署到GitHub。</p>
<p>现在再进入你为你的博客建立的GitHub仓库，应该可以看到包括index.html在内的一堆文件和文件夹。</p>
<p>接下来，我们点击这里：</p>
<p><img src="https://imagebed-1304314898.cos.ap-nanjing.myqcloud.com/hexo-github-pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/10.jpg" alt="10"></p>
<p>往下拉，有个GitHub Pages，在“Source”这里选择“Branch: master”，然后点击“Save”，完成GitHub Pages的部署。</p>
<p>现在在浏览器地址栏输入username.github.io（username为你的github用户名），就可以访问网站了。</p>
<h1 id="网站无法访问的解决方案"><a href="#网站无法访问的解决方案" class="headerlink" title="网站无法访问的解决方案"></a>网站无法访问的解决方案</h1><p>如果你无法访问你的GitHub Pages，浏览器显示：</p>
<p><img src="https://imagebed-1304314898.cos.ap-nanjing.myqcloud.com/hexo-github-pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/12.jpg" alt="12"></p>
<p>请按照以下步骤操作：</p>
<p>Win+R→cmd打开命令提示符，输入</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ping</span> <span class="selector-tag">username</span><span class="selector-class">.github</span><span class="selector-class">.io</span></span><br></pre></td></tr></table></figure>

<p>如果出现如下信息：</p>
<p><img src="https://imagebed-1304314898.cos.ap-nanjing.myqcloud.com/hexo-github-pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/11.jpg" alt="11"></p>
<p>说明你的GitHub Pages的DNS被解析成了127.0.0.1，而不是网站的实际IP地址，这就是你无法访问的原因。</p>
<p>进入控制面板→网络和Internet→网络和共享中心→点击你连接的网络→属性→Internet协议版本4（TCP/IPv4）→属性→使用下面的DNS服务器→114.114.114.114</p>
<p>然后再ping一次username.github.io（username为你的GitHub用户名），检查此时IP地址是否正确。</p>
<p>如果IP地址正确，浏览器访问网站显示GitHub 404页面，则进行以下操作：</p>
<p>进入你为个人博客建立的GitHub仓库，检查并确保：</p>
<ol>
<li>仓库名称为username.github.io（username为你的GitHub用户名）；</li>
<li>在这里：</li>
</ol>
<p><img src="https://imagebed-1304314898.cos.ap-nanjing.myqcloud.com/hexo-github-pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/13.jpg" alt="13"></p>
<p>将master设置为default branch，并删除master外的branch。</p>
<ol start="3">
<li>你的master分支下有index.html文件。</li>
</ol>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">站点配置文件<a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>个人博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+GitHub Pages搭建个人博客（四）</title>
    <url>/posts/4d94af7e.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>这一节主要内容是个人域名和SEO优化。</p>
<a id="more"></a>

<h1 id="个人域名"><a href="#个人域名" class="headerlink" title="个人域名"></a>个人域名</h1><p>如果你不希望你的域名是username.github.io，那么你就需要购买个人域名。</p>
<p>我是在<a href="https://sg.godaddy.com/zh">GoDaddy</a>上买的，据说国内的域名注册商也不错，这个可以自己选择。</p>
<p>注册完成后，登录GitHub，找到网站对应的仓库，在“Settings”中找到“Custom domain”，填入你刚刚注册的域名。</p>
<p>在<a href="https://www.ipaddress.com/">这里</a>填入username.github.io（username为你的GitHub用户名），查找网站的IP地址。</p>
<p>然后在注册域名的网站，在管理DNS的地方设置CNAME为username.github.io（username为你的GitHub用户名），A为网站IP地址。</p>
<p>最后，在source文件夹下新建一个名为CNAME的文件（注意没有扩展名），文件里写上你的域名。</p>
<p>保存，部署之后就可以用自己的域名访问网站了。</p>
<h1 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h1><p>为了让搜索引擎能更好搜索到我们的网站，我们还需要做一定的SEO优化。</p>
<h2 id="添加sitemap"><a href="#添加sitemap" class="headerlink" title="添加sitemap"></a>添加sitemap</h2><p>Git Bash执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>

<p>打开站点配置文件，添加</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sitemap:</span> </span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidusitemap.xml</span></span><br></pre></td></tr></table></figure>

<h2 id="添加robots"><a href="#添加robots" class="headerlink" title="添加robots"></a>添加robots</h2><p>在source文件夹下新建robots.txt文件，添加：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">User-<span class="attr">agent:</span> *</span><br><span class="line"><span class="attr">Allow:</span> /</span><br><span class="line"><span class="attr">Allow:</span> <span class="regexp">/home/</span></span><br><span class="line"><span class="attr">Allow:</span> <span class="regexp">/archives/</span></span><br><span class="line"><span class="attr">Allow:</span> <span class="regexp">/categories/</span></span><br><span class="line"><span class="attr">Allow:</span> <span class="regexp">/tags/</span> </span><br><span class="line"><span class="attr">Allow:</span> <span class="regexp">/about/</span> </span><br><span class="line"><span class="attr">Disallow:</span> <span class="regexp">/vendors/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="regexp">/js/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="regexp">/css/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="regexp">/fonts/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="regexp">/vendors/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="regexp">/fancybox/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Sitemap:</span> <span class="attr">http:</span><span class="comment">//（网址）/sitemap.xml</span></span><br><span class="line"><span class="attr">Sitemap:</span> <span class="attr">http:</span><span class="comment">//（网址）/baidusitemap.xml</span></span><br></pre></td></tr></table></figure>

<p>将（网址）改为你的网站地址。</p>
<h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h2><p>NexT主题自带SEO优化设置。</p>
<p>打开主题配置文件，将原设置更改为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># SEO Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable Baidu transformation on mobile devices.</span></span><br><span class="line"><span class="attr">disable_baidu_transformation:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If true, site-subtitle will be added to index page.</span></span><br><span class="line"><span class="comment"># Remember to set up your site-subtitle in Hexo `_config.yml` (e.g. subtitle: Subtitle)</span></span><br><span class="line"><span class="attr">index_with_subtitle:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Automatically add external URL with Base64 encrypt &amp; decrypt.</span></span><br><span class="line"><span class="attr">exturl:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Google Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://www.google.com/webmasters</span></span><br><span class="line"><span class="attr">google_site_verification:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bing Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://www.bing.com/webmaster</span></span><br><span class="line"><span class="attr">bing_site_verification:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Yandex Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://webmaster.yandex.ru</span></span><br><span class="line"><span class="attr">yandex_site_verification:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Baidu Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://ziyuan.baidu.com/site</span></span><br><span class="line"><span class="attr">baidu_site_verification:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO.</span></span><br><span class="line"><span class="attr">baidu_push:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>个人博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>一个诡异的valine评论界面无法显示问题</title>
    <url>/posts/3372c6b1.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>今天写完<a href="http://sherryix.com/posts/b7a71549.html">Hexo+GitHub Pages搭建个人博客（二）</a>，照例Hexo三连，发现评论显示不出来。再看前面两篇文章的评论，是正常的。</p>
<p>于是我上LeanCloud看了一眼。好像……也看不出什么问题。</p>
<p>然而它就是显示不出来。</p>
<a id="more"></a>

<p>我甚至把原来的应用删掉重新创建了一个，并且重新配置了一遍。对，这意味着我原来的评论和阅读量数据都没有了。</p>
<p>然而依然没有解决问题。</p>
<p>又一个找不出原因的烦人bug，我想。</p>
<p>搭建博客的时候踩过不少奇奇怪怪的坑，有时候忍不住会想，为什么人家一个个都说半个小时搞定，我就要在坑里待到头秃。还好之前踩坑的时候总是会发现有人和我踩过一样的坑，然后把我从坑里拉出来。这次看看有没有。</p>
<p>我试着搜索了我的问题。居然搜不到。</p>
<p>好吧，那就自己瞎摸索着看看呗。</p>
<p>我试着打开了Edge的开发人员工具，想看看相关的代码有没有被执行。![屏幕截图 2020-11-25 124313](../../../屏幕截图 2020-11-25 124313.jpg)</p>
<p>……什么情况？！</p>
<p>我看了正常显示评论的网页代码……明明没有区别啊摔！</p>
<p>我花了几分钟冷静了一下。</p>
<p>然后新建了一篇文章。</p>
<p>这篇文章的评论是正常的。</p>
<p>有没有可能是因为文章内容中出现了首字母大写的valine，导致识别错误？</p>
<p>我试着替换了文章内容，果然可以了。</p>
<p>……嗯是真的诡异。</p>
<p>所以我的数据白删了。</p>
<p><img src="https://imagebed-1304314898.cos.ap-nanjing.myqcloud.com/timg.jpg"></p>
]]></content>
      <categories>
        <category>个人博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>valine</tag>
      </tags>
  </entry>
  <entry>
    <title>个人博客，完成！</title>
    <url>/posts/4de85580.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>就像标题说的那样，这是这个博客的第一篇文章。</p>
<p>有人说，你看现在都0202年了，博客的时代早已过去，写博客是件很没有意义的事。最近在学Python，时不时遇到奇奇怪怪的问题。有的是解释器报错，程序跑不起来；还有的是程序跑是跑起来了，但是没有得到期望的结果。一般来说，像我这样的初学者，是很难凭借自己的力量找出问题出在什么地方的。最后让我解决问题，从而得以把学习进程坚持下去的，往往是他人贡献的一篇篇博客。</p>
<a id="more"></a>

<p>这就是个人博客最大的意义——记录，分享，交流。记录即为总结，输出即为反哺。把自己研究半天终于解决的问题整理成文章发出来，不仅方便自己随时回顾，还方便别人在遇到相似问题时能够更快解决。</p>
<p>同时，写博客也是在和自己对话。它是一个寄托自己记忆和思考的地方，展示着自己的变化和成长。翻看过去的博客，就像回到过去写下博客的自己。有了这样一个记忆深刻的时间点，就感觉时间流逝得没有那么快了。</p>
<p>接下来大概会先整理出这个博客搭建的过程，以及写文章最重要的Markdown语言。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
