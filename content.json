{"meta":{"title":"Sherryix's Blog","subtitle":"","description":"We'll be counting stars.","author":"Sherryix","url":"http://sherryix.com","root":"/"},"pages":[{"title":"分类","date":"2020-11-20T17:03:06.000Z","updated":"2020-11-20T17:03:48.221Z","comments":false,"path":"categories/index.html","permalink":"http://sherryix.com/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2020-11-21T13:06:55.000Z","updated":"2020-11-24T04:05:41.444Z","comments":false,"path":"about/index.html","permalink":"http://sherryix.com/about/index.html","excerpt":"","text":"你好，欢迎来到我的博客。 为什么要建个人博客呢？因为我是一个比较喜欢写东西的人，而目前市面上流行的可以写东西的平台都无法完全满足我的需求。 比如说微信公众号，整体体验不错，和微信融合得很好，但是有两个致命的问题： 不支持评论。评论是文章重要的组成部分，没有评论，相当于读者无法对文章内容进行交流和补充，而第三方的评论插件又普遍不太好用。 不能修改。或者更准确一点，只支持修改几个字这种对错别字进行更正的场合，而不支持写完之后发现某块内容有问题，想直接在原文中更新的情况，而这种情况对我来说是很常见的。 而知乎专栏，虽然评论和修改都比较方便，但是又不够自由。一个专栏只能写某个领域的内容，写一些个人的东西就显得不太合适；并且受平台限制，平台什么格式，你的文章展示出来就是什么格式，平台想安一堆恶心的广告，你的文章上就有一堆恶心的广告，其他支持博客服务的平台，比如CSDN，博客园等，也差不多是这种情况。 于是我就想，干脆自己建一个好了，可以写任何自己想写的东西，实现自己想实现的功能。 这就是这个博客的由来。"},{"title":"标签","date":"2020-11-20T17:01:04.000Z","updated":"2020-11-21T16:17:22.743Z","comments":false,"path":"tags/index.html","permalink":"http://sherryix.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Hexo+GitHub Pages搭建个人博客（二）","slug":"Hexo-GitHub-Pages搭建个人博客（二）","date":"2020-11-25T03:32:29.000Z","updated":"2020-11-25T04:00:53.747Z","comments":true,"path":"posts/b7a71549.html","link":"","permalink":"http://sherryix.com/posts/b7a71549.html","excerpt":"在上一篇文章里，我们搭建了一个基本的博客框架。这个框架能不能用呢？肯定是能的，但是恐怕没几个人会觉得好用。从现在开始，我们将对这个框架进行填充，让它满足我们的各种需求。","text":"在上一篇文章里，我们搭建了一个基本的博客框架。这个框架能不能用呢？肯定是能的，但是恐怕没几个人会觉得好用。从现在开始，我们将对这个框架进行填充，让它满足我们的各种需求。 更换主题如果你觉得官方主题不好看，你可以在Themes | Hexo寻找你喜欢的主题。或者，在GitHub上搜索“hexo”，也可以找到不少主题。下图展示了GitHub上搜索“hexo”看到的结果： 结果是按star数从高到低排列的。star数反映项目的受欢迎程度，在GitHub上，如果你喜欢某个项目，可以点亮star，表达对这个项目的支持。可以看到，最受欢迎的主题是NexT，其次是yilia。在我看来，博客的重点在于内容，所以一个好的主题，一定要能让人更好地把注意力集中在内容上，而不是喧宾夺主。这两个主题都能很好满足这一点。点击进入对应的仓库，可以查看各个主题的说明。 我选择了NexT这个主题，所以之后的内容都会围绕这个主题来展开。其它主题的配置方式大同小异。 在博客文件夹Git Bash，输入 1npm install hexo-theme-next 安装主题。 再打开博客文件夹下的站点配置文件_config.yml，设置 1theme: next 就完成了主题的更换。 在Git Bash输入 1hexo s 看看效果吧~ NexT官方文档这是NexT的官方文档：NexT 使用文档 跟着这个文档，你可以设置主题样式、菜单内容、侧栏、头像、签名等，并引入搜索、统计、评论、RSS等常用功能。 建议养成遇到问题优先查看官方文档的习惯，因为作者一定最了解自己做的东西，官方文档是最权威的。 官方文档已经对主题如何配置做了十分详细的介绍，下面仅对官方文档做一点点补充说明。 配置站点图标首先，你需要准备一张16x16和一张32x32的图片。 这个工具可以把图片裁剪成需要的大小：favicon制作 - 在线工具 其次，你需要把这两张图片放入themes\\next\\source\\images文件夹下。 最后，你需要更改主题配置文件（即themes\\next文件夹下的_config.yml文件，下同）的这个地方： Valine官方文档没有提到Valine这个评论系统，但NexT主题本身是支持Valine的。 Valine的官方文档在这里：介绍 | Valine 一款快速、简洁且高效的无后端评论系统。 Valine并非没有后端，而是使用了国内后端云服务提供商LeanCloud提供的存储服务。 下面详细说明Valine评论功能的添加和设置。 配置LeanCloud在LeanCloud注册，注册后进入控制台，点击“创建应用”。名称随便起，计价方案选择“开发版”，点击“创建”。 进入刚刚创建好的应用，点击“存储”→“创建Class”，分别创建名为Comment和Counter的Class。 再点击“设置”。先进入“安全中心”，在“Web安全域名”中填入你的网站的访问地址。 再进入“应用Keys”，可以看到AppID和AppKey。 配置主题然后，打开位于themes/next目录下的主题配置文件_config.yml，在这里填入AppID和AppKey： 这里的“visitor”设置决定是否开启文章访问量统计功能。这里需要注意，它和leancloud_visitors是冲突的，如果需要使用valine的同时开启访问量统计功能，请在这里将visitor置为true，并将leancloud_visitors中的enable置为false。 设置背景动画NexT主题配置文件中的两种动画效果在配置前需要先安装，安装地址在配置文件中，按照说明安装即可。 设置加载时的动画效果在主题配置文件的这里进行设置，同样需要先安装dependency。 显示阅读进度条在主题配置文件的这里进行设置。 将enable置为true，即可在页面最上端看到一个随阅读进度变化的横条。position设置横条位置（top：顶部，bottom：底部），color设置横条颜色，height设置横条宽度。 显示复制代码按钮在主题配置文件的这里进行设置。 将enable置为true，可以看到代码右侧出现了复制按钮。 更改页面底部年份和版权信息之间的图标在主题配置文件的这里进行设置。 图标必须使用Font Awesome图标库内的图标，图标列表：Font Awesome 格式参考Font Awesome文档中的“基本用法”。 如果将animated设置为true，图标会动起来，就像你现在在底部看到的这样。 文章结尾显示“欢迎关注我的其它发布渠道”在主题配置文件的这里设置。","categories":[{"name":"个人博客搭建","slug":"个人博客搭建","permalink":"http://sherryix.com/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://sherryix.com/tags/Hexo/"}]},{"title":"Hexo+GitHub Pages搭建个人博客（一）","slug":"hexo-github-pages搭建个人博客（一）","date":"2020-11-24T03:47:24.000Z","updated":"2020-11-24T10:13:55.190Z","comments":true,"path":"posts/9e423b68.html","link":"","permalink":"http://sherryix.com/posts/9e423b68.html","excerpt":"引言在这个页面的底端有这样一句话： “由 Hexo &amp; NexT.Pisces 强力驱动” 相信已经有人搜索过这里出现的“Hexo”和“NexT.Pisces”。你可能会找到这样的教程： hexo史上最全搭建教程 还有Hexo的官方文档： 文档 | Hexo 这些都很有用，但都有着各自的局限性。有的内容已经过时，还有的地方没有讲全面，需要结合其他内容一起看。下面我会结合我踩过的坑，对这个博客的搭建过程做一个全面的梳理。不需要专业基础，只要你会上网，会安装软件，就可以看懂这个教程。如果你也想搭建个人博客，并且觉得这个博客建得还算可以，就跟着一起做一遍；如果你觉得这个博客呈现的效果和你的期望还有差距，也可以先看一遍这里的步骤，再在现存基础上尝试实现你心目中理想的效果。 这一节我们用大约半个小时的时间，建立一个可以被他人访问到的博客框架。","text":"引言在这个页面的底端有这样一句话： “由 Hexo &amp; NexT.Pisces 强力驱动” 相信已经有人搜索过这里出现的“Hexo”和“NexT.Pisces”。你可能会找到这样的教程： hexo史上最全搭建教程 还有Hexo的官方文档： 文档 | Hexo 这些都很有用，但都有着各自的局限性。有的内容已经过时，还有的地方没有讲全面，需要结合其他内容一起看。下面我会结合我踩过的坑，对这个博客的搭建过程做一个全面的梳理。不需要专业基础，只要你会上网，会安装软件，就可以看懂这个教程。如果你也想搭建个人博客，并且觉得这个博客建得还算可以，就跟着一起做一遍；如果你觉得这个博客呈现的效果和你的期望还有差距，也可以先看一遍这里的步骤，再在现存基础上尝试实现你心目中理想的效果。 这一节我们用大约半个小时的时间，建立一个可以被他人访问到的博客框架。 安装所有需要用到的东西先不用管它们都做什么用，以后会知道的。 安装Node.js在官网Node.js上下载，一路Next即可。 安装完成后，按Win+R→输入cmd打开命令提示符，输入 1node -v 和 1npm -v 如果出现版本号，就说明Node.js安装成功。 安装Git同样，在官网Git上下载，一路Next即可。 安装完成后，打开命令提示符，输入 1git --version 如果出现版本号，就说明Git安装成功。 安装完成后，鼠标右键菜单会多出两个选项：“Git GUI Here”和“Git Bash Here”，如下图所示： 安装Hexo在你打算放置本地博客文件的地方新建一个文件夹，比如说我把博客文件放在C:\\Blog\\hexo文件夹下。 然后在你刚才建的文件夹目录下点击鼠标右键，选择Git Bash Here，在跳出的控制台窗口中输入 1npm install hexo-cli -g 安装Hexo。 安装完成后，输入 1hexo -v 如果出现版本号信息，说明安装成功。 安装Visual Studio Code在Visual Studio Code下载并安装。一路Next。 安装Typora在Typora下载并安装。Next。 配置GitHub对，就是那个全球最大的同性交友网站很geek的GitHub。 注册GitHub账号浏览器打开GitHub，在下图所示的地方注册： 用户名一定要好好起，因为如果你不打算买域名，那username.github.io就是你的博客访问地址了。 建立仓库注册完成后，点击下图所示的位置： 会跳转到这个页面： 这里需要注意，“Repository name”必须是“username.github.io”（username为你的用户名），其余默认即可。 填写完成后，点击“Create repository”，建立仓库。 构建网站在博客文件夹下Git Bash，输入 1hexo init 你可以看到文件夹下多了一堆文件，这些文件构成了一个个人博客网站最基本的框架。 再输入 1hexo g 这个指令用于生成静态文件，你会看到当前文件夹下多了一个名为public的文件夹。 输入 1hexo s --debug 这个指令启动本地服务器，让你可以在本地看到网站效果，同时在控制台窗口中显示网站加载过程。 Warning若不影响运行，可以忽略。 打开浏览器，输入http://localhost:4000/，如果一切顺利，你会看到这样的网页： 如果你看到的和预期不一致，请尝试根据控制台信息寻找原因，并检验每一步操作有无错误。 按Ctrl+C关闭本地服务器。 如果在本地服务器启动期间网站内容发生改变，直接刷新即可看到效果，不需要重启服务器。 让网站被别人访问到刚才的网页只有我们自己能看见，那么怎么让别人也能访问到这个网页呢？这里我们借助GitHub Pages，将网站内容托管在GitHub。选择GitHub有以下几个原因： 免费； 支持自定义域名； GitHub背靠微软这棵大树，这意味着它足够稳定，不会时不时崩溃/不声不响永久瘫痪； GitHub本身是一个能打开眼界的网站。社区氛围好，关于Hexo的工具也多。 生成SSH首先，我们希望Git能够使用我们的GitHub账号自动远程登录，不需要每次都手动输入用户名和密码。 在博客文件所在文件夹右键打开Git Bash（如无特殊说明，后文中的Git Bash均为在博客文件所在文件夹Git Bash），输入 12git config --global user.name &quot;username&quot;git config --global user.email &quot;useremail&quot; 这里的user.name和user.email分别对应你在注册GitHub时填入的用户名和邮箱，请自行修改。 可以输入以下命令，检查你输入的用户名和邮箱是否正确 12git config user.namegit config user.email 然后输入 1ssh-keygen -t rsa -C &quot;useremail&quot; 这个指令生成密钥SSH key。遇到提示输入信息时直接回车即可。 指令执行结束后，会在当前用户目录下生成.ssh文件夹，其中包含私钥文件id_rsa和公钥文件id_rsa.pub。我们需要将公钥放在GitHub上，当需要连接GitHub自己的账户时，它就会根据公钥匹配你的私钥，只有公钥与私钥互相匹配，才能顺利将文件上传GitHub。 再输入 1ssh-agent -s 继续输入 1ssh-add ~/.ssh/id_rsa 这两个指令解释起来有点复杂，反正输就完事了。 将SSH添加到GitHub输入以下指令 1clip &lt; ~/.ssh/id_rsa.pub 这条指令复制SSH key到剪贴板。 打开GitHub，点击这里： 再点击左侧侧边栏的“SSH and GPG keys”，点击右上角的“New SSH key”添加公钥： 完成后点击“Add SSH key”，即可完成SSH key的添加。 在Git Bash中输入以下命令，检验SSH是否配置成功 1ssh -T git@github.com 出现提示输入“yes”即可。如果出现以下信息，说明配置成功 1Hi username!You&#x27;ve successfully authenticated,but GitHub does not provide shell access. 部署到GitHub仓库打开GitHub，点击这里： 再点击你刚才建好的仓库，点击这里复制链接： 用Visual Studio Code打开博客文件夹下的config.yml[1]，修改最后一行的配置为 1234deploy: type: git repository: git@github.com:username/username.github.io.git branch: master 其中的“repository”后粘贴你刚才复制的链接。 需要注意，yml的语法非常严格，请务必确保标点符号正确，不多出/遗漏空格。 然后在Git Bash中输入 1npm install hexo-deployer-git --save 这个指令安装deploy-git，有它才能进行部署操作。 然后让我们Git Bash，来一套下面的Hexo三连： 123hexo cleanhexo ghexo d 其中hexo clean用于清除之前生成的东西（就是那个public文件夹）；hexo g（或者hexo generate）用于生成静态文件；hexo d（或者hexo deploy）用于将生成的静态文件部署到GitHub。 现在再进入你为你的博客建立的GitHub仓库，应该可以看到包括index.html在内的一堆文件和文件夹。 接下来，我们点击这里： 往下拉，有个GitHub Pages，在“Source”这里选择“Branch: master”，然后点击“Save”，完成GitHub Pages的部署。 现在在浏览器地址栏输入username.github.io（username为你的github用户名），就可以访问网站了。 网站无法访问的解决方案如果你无法访问你的GitHub Pages，浏览器显示： 请按照以下步骤操作： Win+R→cmd打开命令提示符，输入 1ping username.github.io 如果出现如下信息： 说明你的GitHub Pages的DNS被解析成了127.0.0.1，而不是网站的实际IP地址，这就是你无法访问的原因。 进入控制面板→网络和Internet→网络和共享中心→点击你连接的网络→属性→Internet协议版本4（TCP/IPv4）→属性→使用下面的DNS服务器→114.114.114.114 然后再ping一次username.github.io（username为你的GitHub用户名），检查此时IP地址是否正确。 如果IP地址正确，浏览器访问网站显示GitHub 404页面，则进行以下操作： 进入你为个人博客建立的GitHub仓库，检查并确保： 仓库名称为username.github.io（username为你的GitHub用户名）； 在这里： 将master设置为default branch，并删除master外的branch。 你的master分支下有index.html文件。 1.站点配置文件 ↩","categories":[{"name":"个人博客搭建","slug":"个人博客搭建","permalink":"http://sherryix.com/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://sherryix.com/tags/Hexo/"}]},{"title":"个人博客，完成！","slug":"个人博客，完成！","date":"2020-11-21T12:29:09.000Z","updated":"2020-11-22T13:02:21.166Z","comments":true,"path":"posts/4de85580.html","link":"","permalink":"http://sherryix.com/posts/4de85580.html","excerpt":"就像标题说的那样，这是这个博客的第一篇文章。 有人说，你看现在都0202年了，博客的时代早已过去，写博客是件很没有意义的事。最近在学Python，时不时遇到奇奇怪怪的问题。有的是解释器报错，程序跑不起来；还有的是程序跑是跑起来了，但是没有得到期望的结果。一般来说，像我这样的初学者，是很难凭借自己的力量找出问题出在什么地方的。最后让我解决问题，从而得以把学习进程坚持下去的，往往是他人贡献的一篇篇博客。","text":"就像标题说的那样，这是这个博客的第一篇文章。 有人说，你看现在都0202年了，博客的时代早已过去，写博客是件很没有意义的事。最近在学Python，时不时遇到奇奇怪怪的问题。有的是解释器报错，程序跑不起来；还有的是程序跑是跑起来了，但是没有得到期望的结果。一般来说，像我这样的初学者，是很难凭借自己的力量找出问题出在什么地方的。最后让我解决问题，从而得以把学习进程坚持下去的，往往是他人贡献的一篇篇博客。 这就是个人博客最大的意义——记录，分享，交流。记录即为总结，输出即为反哺。把自己研究半天终于解决的问题整理成文章发出来，不仅方便自己随时回顾，还方便别人在遇到相似问题时能够更快解决。 同时，写博客也是在和自己对话。它是一个寄托自己记忆和思考的地方，展示着自己的变化和成长。翻看过去的博客，就像回到过去写下博客的自己。有了这样一个记忆深刻的时间点，就感觉时间流逝得没有那么快了。 接下来大概会先整理出这个博客搭建的过程，以及写文章最重要的Markdown语言。","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://sherryix.com/tags/%E9%9A%8F%E7%AC%94/"}]}],"categories":[{"name":"个人博客搭建","slug":"个人博客搭建","permalink":"http://sherryix.com/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://sherryix.com/tags/Hexo/"},{"name":"随笔","slug":"随笔","permalink":"http://sherryix.com/tags/%E9%9A%8F%E7%AC%94/"}]}